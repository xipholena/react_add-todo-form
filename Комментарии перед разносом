const preparedTodos = todos.map(todo => ({
  ...todo,
  user: users.filter(user => user.id === todo.userId),
}));

class App extends React.Component {
  state = {
    todos: preparedTodos,
    user: '',
    todo: '',
    isValidSelect: false,
    isEmpty: false,
    isTooLong: false,
    //containsSymbols: false,
   // containsWords: true,
  }

  changeInSelect(e) {
    if(e.target.value==='none'){ //проверка, чтобы повторно не был вызван дефолтный option "choose a user"
      this.setState({
        isValidSelect: true
      })
     } else {
      this.setState({
        user: e.target.value,
        isValidSelect: false,
      });
     }
  }

  handleSubmit(e) {
    e.preventDefault();
    if (this.state.user.length > 0 && this.state.todo.length > 0
      /*&& !this.state.containsSymbols*/ && !this.state.isTooLong
      /*&& this.state.containsWords*/) {
      this.setState({
        user: '',
        todo: '',
      });
    }
  }

  changeInput(e) {
    if (e.target.value.length > 10) {
      this.setState({
        isTooLong: true,
      });
    } else {
      this.setState({
        isTooLong: false,
      });
    }

    /*if (/[^\w\s]/.test(e.target.value)) {
      this.setState({
        containsSymbols: true,
      });
    } else {
      this.setState({
        containsSymbols: false,
      });
    }*/

   /* if (e.target.value.replace(/ /g, '').replace(/[0-9]/g, '').length === 0) {
      this.setState({
        containsWords: false,
      });
    } else {
      this.setState({
        containsWords: true,
      });
    }*/

    
  }

  addTodo(todo, user) {
    if (this.state.user.length > 0 && this.state.todo.length > 0
      && !this.state.isTooLong /*&& !this.state.containsSymbols*/
      /*&& this.state.containsWords*/) {
      const newTodo = {
        completed: false,
        id: preparedTodos.length + 1,
        title: todo,
        user: [users.find(person => person.name === user)],
        userId: users.find(person => person.name === user)?.id,
      };

      this.setState(state => ({
        todos: [
          newTodo,
          ...state.todos,
        ],
      }));
    }

    if (user.length === 0) {
      this.setState({
        isValidSelect: true,
      });
    }

    if (todo.length === 0) {
      this.setState({
        isEmpty: true,
      });
    }
  }

  render() {
    const { todos, user, todo, isValidSelect, isEmpty,
      isTooLong, /*containsSymbols,*/ /*containsWords*/ } = this.state;

    return (
      <div className="App">
        <div>
          <h1>Add todo form</h1>
          <form
            className="form"
            method="POST"
            action="/api/userTodo"
            onSubmit={e => this.handleSubmit(e, user, todo)}
          >
            <select
              className="form__field"
              name="user"
              value={user}
              onChange={e => this.changeInSelect(e)}
            >
              <option>Choose a user</option>
              {users.map(person => (
                <option
                  key={person.id}
                  value={person.name}
                >
                  {person.name}
                </option>
              ))}
            </select>
            {isValidSelect && <p>Please choose a user</p>}
            <label>
              <input
                className="form__field form__field--wide"
                name="todo"
                placeholder="Add something to do"
                value={todo}
                onChange={e => this.changeInput(e)}
              />
            </label>
            {isEmpty && <p>Please enter a Todo</p>}
            {isTooLong
              && <p>A Todo shouldn&apos;t be longer than 10 characters</p>}
            {/*containsSymbols
              && <p>A Todo should contain only latin characters or digits</p>*/}
            {/*!containsWords && <p>Please, enter the words</p>*/}
            <button
              type="submit"
              className="form__field"
              onClick={() => (this.addTodo(todo, user))}
            >
              Add
            </button>
          </form>
        </div>
        <ToDoList todos={todos} />
      </div>
    );
  }
}

export default App;
